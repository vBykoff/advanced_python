import unittest
from faker import Faker 
from lru_cache import LRUCache
from filter_file import filter_file
import random

class LruTest(unittest.TestCase):
    def test_lru_cache(self):
        cache = LRUCache(2)

        cache.set("k1", "val1")
        cache.set("k2", "val2")

        self.assertTrue(cache.get("k3") == None)
        self.assertTrue(cache.get("k2") == "val2")
        self.assertTrue(cache.get("k1") == "val1")

        cache.set("k3", "val3")
        self.assertTrue(cache.get("k3") == "val3")
        self.assertTrue(cache.get("k2") == None)
        self.assertTrue(cache.get("k1") == "val1")


class FilterTest(unittest.TestCase):

    def setUp(self):
        faker = Faker()
        self.path_to_file = "test_file"
        self.words_to_find = []
        self.true_lines = []
        with open(self.path_to_file, "w") as f:
            for i in range(10):
                words = faker.sentence().strip(" .").split()
                sentence = " ".join(words)
                f.write(sentence)
                f.write("\n")
                # the line will be generated by filter_file or not
                if random.randint(0, 1):
                    self.true_lines.append(sentence)
                    random_word = words[random.randint(0, len(words) - 1)]
                    self.words_to_find.append(random_word)
                
               

    def test_filter_file(self):
        generator = filter_file(self.path_to_file, self.words_to_find)
        gens = []
        for gen in generator:
            gens.append(gen)
        for line, gen in zip(self.true_lines, gens):
            self.assertEqual(line, gen)


if __name__ == "__main__":
    unittest.main()



